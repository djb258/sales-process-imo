process: imo
version: 1.0.0
mission:
  north_star: "Create a flexible Input-Middle-Output blueprint system for process automation."
  success_metrics: 
    - "Process design in under 10 minutes"
    - "Auto-generate implementation scaffolds"
    - "Support both greenfield and integration patterns"
  constraints: 
    - "No external DB during planning phase"
    - "Static UI with optional API"
  risks: []
universals:
  triggers: []
  gates: []
  idempotency: 
    key: "{process_id}_{run_id}"
  retries: 
    max: 3
    backoff: exponential
    timeout_ms: 60000
  observe: 
    events: ["stage.start", "stage.complete", "stage.error"]
    metrics: ["duration_ms", "record_count"]
    redact: ["pii", "secrets"]
  security: 
    secrets: []
    scopes: ["read:source", "write:output"]
  data_policy: 
    classification: internal
    retention: P30D
  limits: 
    qps: 100
    budget_usd: 1000
    slo_ms: 5000
  errors: 
    on_fail: retry
  human: 
    approval_required: false
buckets:
  input:
    stages:
      - key: one_liner
        title: "What do we accept/reject?"
        kind: frame
        fields: 
          one_liner: ""
        required_fields: 
          - "one_liner"
      - key: sources
        title: "Source strategy, triggers, prechecks"
        kind: what
        fields:
          mode: "design"
          sources: []
          triggers: []
          prechecks: []
          trust_boundary: ""
          design:
            schema_draft: {}
            sample_records: []
          integrate:
            provider: ""
            external_schema_ref: ""
            mapping: []
            ownership: ""
            version: ""
        required_fields:
          - "mode"
          - "sources"
      - key: contract
        title: "Input schema & idempotency"
        kind: contract
        fields: 
          schema_ref: ""
          idempotency_key: ""
        required_fields: 
          - "schema_ref"
          - "idempotency_key"
        milestones: 
          seeds_process_id: true
      - key: intake_steps
        title: "Intake steps & params"
        kind: steps
        fields: 
          steps: []
          retries: 
            max: 3
            backoff: "exponential"
          timeout_ms: 60000
          limits: 
            qps: null
        required_fields: 
          - "steps"
      - key: fixtures
        title: "Examples & acceptance"
        kind: tests
        fields: 
          fixtures: []
          asserts: []
        required_fields: 
          - "fixtures"
          - "asserts"
  middle:
    stages:
      - key: frame
        title: "What value we add"
        kind: frame
        fields: 
          one_liner: ""
        required_fields: 
          - "one_liner"
      - key: state_machine
        title: "States & owners"
        kind: what
        fields: 
          states: []
          start: ""
          terminal: []
          owners: []
        required_fields: 
          - "states"
          - "start"
          - "terminal"
      - key: gates
        title: "Validation gates & invariants (HEIR-capable)"
        kind: contract
        fields: 
          gates: []
          invariants: []
          approvals: []
          heir_ruleset_id: ""
          mode: "strict"
        required_fields: 
          - "gates"
      - key: transform
        title: "Transform / enrich (idempotent)"
        kind: steps
        fields: 
          steps: []
          lookups: []
          retries: 
            max: 3
            backoff: "exponential"
          timeout_ms: 120000
          budget_usd: 10
        required_fields: 
          - "steps"
      - key: tests
        title: "Fixtures & simulator"
        kind: tests
        fields: 
          fixtures: []
          asserts: []
        required_fields: 
          - "fixtures"
          - "asserts"
      - key: staging
        title: "Stage to working store + events"
        kind: wire
        fields: 
          working_store: "firebase"
          write_kind: "upsert"
          document_keys: []
          events: ["middle.step.start", "middle.step.done", "middle.step.error"]
        required_fields: 
          - "working_store"
          - "events"
  output:
    stages:
      - key: frame
        title: "Who gets what (and why now)"
        kind: frame
        fields: 
          one_liner: ""
        required_fields: 
          - "one_liner"
      - key: destinations
        title: "Destinations & consumers"
        kind: what
        fields: 
          destinations: []
          consumers: []
          side_effects: []
        required_fields: 
          - "destinations"
      - key: promotion
        title: "Output schema, promotion gate, audit"
        kind: contract
        fields: 
          schema_ref: ""
          promotion_gate: "validator.status=='pass' && audit.present==true"
          audit: ["run_id", "hash", "actor"]
        required_fields: 
          - "schema_ref"
          - "promotion_gate"
          - "audit"
        milestones: 
          sets_promotion_gate: true
      - key: publish
        title: "UPSERT, notifications, retention, events"
        kind: steps
        fields: 
          upsert_rule: "ON CONFLICT (natural_key) DO UPDATE"
          notifications: []
          retention: "P30D"
          events: ["output.promoted", "notify.sent"]
        required_fields: 
          - "upsert_rule"
          - "events"