/**
 * STAMPED Schema Mapper
 * Converts Firebase SPVPET schema → Neon STAMPED schema
 *
 * STAMPED Doctrine:
 * - section_number: Doctrine numbering
 * - column_number: Unique ID per column
 * - column_description: Human-readable
 * - column_format: Data type/format rule
 * - timestamp_last_touched: Last update timestamp
 */

export interface StampedColumn {
  section_number: string;
  column_number: string;
  column_description: string;
  column_format: string;
  value: any;
  timestamp_last_touched: number;
}

export interface NeonClient {
  client_id: string; // Auto-generated by Neon
  prospect_id: string; // Original Firebase ID
  company_name: string;
  ein?: string;
  industry?: string;
  state: string;
  employee_count: number;
  renewal_date?: string;
  total_annual_cost: number;
  current_carrier?: string;
  funding_type?: string;
  contact_name?: string;
  contact_email?: string;
  contact_phone?: string;
  created_at: number;
  updated_at: number;
  promoted_at: number;
  stamped_metadata: StampedColumn[];
}

export interface NeonEmployee {
  employee_id: string;
  client_id: string;
  dependent_count?: number;
  age_bracket?: string;
  utilization_tier?: 'high' | 'standard';
  created_at: number;
  stamped_metadata: StampedColumn[];
}

export interface NeonComplianceFlag {
  compliance_id: string;
  client_id: string;
  requirement_type: 'federal' | 'state' | 'local';
  requirement_name: string;
  requirement_description: string;
  required: boolean;
  deadline?: string;
  category?: string;
  created_at: number;
  stamped_metadata: StampedColumn[];
}

export interface NeonFinancialModel {
  model_id: string;
  client_id: string;
  model_type: 'monte_carlo' | 'insurance_split';

  // Monte Carlo fields
  baseline?: number;
  volatility?: number;
  simulations?: number;
  p10?: number;
  p50?: number;
  p90?: number;
  p95?: number;
  p99?: number;
  mean?: number;
  std_dev?: number;

  // Insurance Split fields
  high_utilizers_count?: number;
  high_utilizers_cost?: number;
  high_utilizers_avg?: number;
  standard_utilizers_count?: number;
  standard_utilizers_cost?: number;
  standard_utilizers_avg?: number;
  cost_multiplier?: number;

  created_at: number;
  stamped_metadata: StampedColumn[];
}

export interface NeonSavingsScenario {
  scenario_id: string;
  client_id: string;
  actual_cost: number;
  with_savings_cost: number;
  without_savings_cost: number;
  savings_amount: number;
  savings_percentage: number;
  cost_increase: number;
  increase_percentage: number;
  retro_description: string;
  forward_description: string;
  created_at: number;
  stamped_metadata: StampedColumn[];
}

export interface PromotionLog {
  log_id: string;
  prospect_id: string;
  client_id: string;
  timestamp: number;
  agent_execution_signature: string;
  schema_version: string;
  blueprint_version_hash: string;
  status: 'success' | 'failed' | 'partial';
  error_message?: string;
  records_created: {
    clients: number;
    employees: number;
    compliance_flags: number;
    financial_models: number;
    savings_scenarios: number;
  };
}

// ============================================================================
// STAMPED METADATA BUILDERS
// ============================================================================

/**
 * Creates STAMPED column metadata
 */
function createStampedColumn(
  sectionNumber: string,
  columnNumber: string,
  description: string,
  format: string,
  value: any
): StampedColumn {
  return {
    section_number: sectionNumber,
    column_number: columnNumber,
    column_description: description,
    column_format: format,
    value,
    timestamp_last_touched: Date.now(),
  };
}

// ============================================================================
// MAPPER FUNCTIONS
// ============================================================================

/**
 * Maps Factfinder (Firebase) → Client (Neon STAMPED)
 */
export function mapFactfinderToClient(
  prospectId: string,
  factfinder: any
): NeonClient {
  const timestamp = Date.now();

  const stampedMetadata: StampedColumn[] = [
    createStampedColumn('1.1', 'C001', 'Company Name', 'string', factfinder.company.name),
    createStampedColumn('1.1', 'C002', 'State', 'string:2', factfinder.company.state),
    createStampedColumn('1.1', 'C003', 'Employee Count', 'integer', factfinder.company.employeeCount),
    createStampedColumn('1.1', 'C004', 'Industry', 'string', factfinder.company.industry || null),
    createStampedColumn('1.2', 'C005', 'Total Annual Cost', 'decimal:2', factfinder.claims.totalAnnualCost),
    createStampedColumn('1.2', 'C006', 'Current Carrier', 'string', factfinder.insurance.currentCarrier || null),
    createStampedColumn('1.2', 'C007', 'Funding Type', 'enum:funding_type', factfinder.insurance.fundingType || null),
    createStampedColumn('1.2', 'C008', 'Renewal Date', 'date:ISO', factfinder.insurance.renewalDate || null),
    createStampedColumn('1.3', 'C009', 'Contact Name', 'string', factfinder.company.contactName || null),
    createStampedColumn('1.3', 'C010', 'Contact Email', 'email', factfinder.company.contactEmail || null),
    createStampedColumn('1.3', 'C011', 'Contact Phone', 'phone', factfinder.company.contactPhone || null),
  ];

  return {
    client_id: '', // Will be generated by Neon
    prospect_id: prospectId,
    company_name: factfinder.company.name,
    ein: factfinder.company.ein || undefined,
    industry: factfinder.company.industry || undefined,
    state: factfinder.company.state,
    employee_count: factfinder.company.employeeCount,
    renewal_date: factfinder.insurance.renewalDate || undefined,
    total_annual_cost: factfinder.claims.totalAnnualCost,
    current_carrier: factfinder.insurance.currentCarrier || undefined,
    funding_type: factfinder.insurance.fundingType || undefined,
    contact_name: factfinder.company.contactName || undefined,
    contact_email: factfinder.company.contactEmail || undefined,
    contact_phone: factfinder.company.contactPhone || undefined,
    created_at: timestamp,
    updated_at: timestamp,
    promoted_at: timestamp,
    stamped_metadata: stampedMetadata,
  };
}

/**
 * Maps Insurance Split → Employees (Neon STAMPED)
 * Creates employee records based on 10/85 split
 */
export function mapInsuranceSplitToEmployees(
  clientId: string,
  insuranceSplit: any
): NeonEmployee[] {
  const timestamp = Date.now();
  const employees: NeonEmployee[] = [];

  // High utilizers (top 10%)
  for (let i = 0; i < insuranceSplit.highUtilizers.count; i++) {
    employees.push({
      employee_id: `${clientId}-EMP-H-${i + 1}`,
      client_id: clientId,
      utilization_tier: 'high',
      created_at: timestamp,
      stamped_metadata: [
        createStampedColumn('2.1', 'E001', 'Employee Tier', 'enum:utilization_tier', 'high'),
        createStampedColumn('2.1', 'E002', 'Est. Annual Cost', 'decimal:2', insuranceSplit.highUtilizers.avgPerEmployee),
      ],
    });
  }

  // Standard utilizers (remaining 90%)
  for (let i = 0; i < insuranceSplit.standardUtilizers.count; i++) {
    employees.push({
      employee_id: `${clientId}-EMP-S-${i + 1}`,
      client_id: clientId,
      utilization_tier: 'standard',
      created_at: timestamp,
      stamped_metadata: [
        createStampedColumn('2.1', 'E001', 'Employee Tier', 'enum:utilization_tier', 'standard'),
        createStampedColumn('2.1', 'E002', 'Est. Annual Cost', 'decimal:2', insuranceSplit.standardUtilizers.avgPerEmployee),
      ],
    });
  }

  return employees;
}

/**
 * Maps Compliance → Compliance Flags (Neon STAMPED)
 */
export function mapComplianceToFlags(
  clientId: string,
  compliance: any
): NeonComplianceFlag[] {
  const timestamp = Date.now();
  const flags: NeonComplianceFlag[] = [];

  // Federal requirements
  compliance.requirements.federal.forEach((req: any, index: number) => {
    flags.push({
      compliance_id: `${clientId}-COMP-F-${index + 1}`,
      client_id: clientId,
      requirement_type: 'federal',
      requirement_name: req.name,
      requirement_description: req.description,
      required: req.required,
      deadline: req.deadline || undefined,
      category: req.category || undefined,
      created_at: timestamp,
      stamped_metadata: [
        createStampedColumn('3.1', 'CF001', 'Requirement Type', 'enum:requirement_type', 'federal'),
        createStampedColumn('3.1', 'CF002', 'Requirement Name', 'string', req.name),
        createStampedColumn('3.1', 'CF003', 'Required', 'boolean', req.required),
        createStampedColumn('3.1', 'CF004', 'Deadline', 'date:ISO', req.deadline || null),
      ],
    });
  });

  // State requirements
  compliance.requirements.state.forEach((req: any, index: number) => {
    flags.push({
      compliance_id: `${clientId}-COMP-S-${index + 1}`,
      client_id: clientId,
      requirement_type: 'state',
      requirement_name: req.name,
      requirement_description: req.description,
      required: req.required,
      deadline: req.deadline || undefined,
      category: req.category || undefined,
      created_at: timestamp,
      stamped_metadata: [
        createStampedColumn('3.2', 'CF001', 'Requirement Type', 'enum:requirement_type', 'state'),
        createStampedColumn('3.2', 'CF002', 'Requirement Name', 'string', req.name),
        createStampedColumn('3.2', 'CF003', 'Required', 'boolean', req.required),
        createStampedColumn('3.2', 'CF004', 'Deadline', 'date:ISO', req.deadline || null),
      ],
    });
  });

  // Local requirements
  compliance.requirements.local.forEach((req: any, index: number) => {
    flags.push({
      compliance_id: `${clientId}-COMP-L-${index + 1}`,
      client_id: clientId,
      requirement_type: 'local',
      requirement_name: req.name,
      requirement_description: req.description,
      required: req.required,
      deadline: req.deadline || undefined,
      category: req.category || undefined,
      created_at: timestamp,
      stamped_metadata: [
        createStampedColumn('3.3', 'CF001', 'Requirement Type', 'enum:requirement_type', 'local'),
        createStampedColumn('3.3', 'CF002', 'Requirement Name', 'string', req.name),
        createStampedColumn('3.3', 'CF003', 'Required', 'boolean', req.required),
        createStampedColumn('3.3', 'CF004', 'Deadline', 'date:ISO', req.deadline || null),
      ],
    });
  });

  return flags;
}

/**
 * Maps Monte Carlo → Financial Model (Neon STAMPED)
 */
export function mapMonteCarloToFinancialModel(
  clientId: string,
  monteCarlo: any
): NeonFinancialModel {
  const timestamp = Date.now();

  return {
    model_id: `${clientId}-FM-MC`,
    client_id: clientId,
    model_type: 'monte_carlo',
    baseline: monteCarlo.baseline,
    volatility: monteCarlo.volatility,
    simulations: monteCarlo.simulations,
    p10: monteCarlo.percentiles.p10,
    p50: monteCarlo.percentiles.p50,
    p90: monteCarlo.percentiles.p90,
    p95: monteCarlo.summary?.p95,
    p99: monteCarlo.summary?.p99,
    mean: monteCarlo.summary?.mean,
    std_dev: monteCarlo.summary?.stdDev,
    created_at: timestamp,
    stamped_metadata: [
      createStampedColumn('4.1', 'FM001', 'Model Type', 'enum:model_type', 'monte_carlo'),
      createStampedColumn('4.1', 'FM002', 'Baseline', 'decimal:2', monteCarlo.baseline),
      createStampedColumn('4.1', 'FM003', 'Volatility', 'decimal:4', monteCarlo.volatility),
      createStampedColumn('4.1', 'FM004', 'Simulations', 'integer', monteCarlo.simulations),
      createStampedColumn('4.2', 'FM005', 'P10 Percentile', 'decimal:2', monteCarlo.percentiles.p10),
      createStampedColumn('4.2', 'FM006', 'P50 Percentile', 'decimal:2', monteCarlo.percentiles.p50),
      createStampedColumn('4.2', 'FM007', 'P90 Percentile', 'decimal:2', monteCarlo.percentiles.p90),
      createStampedColumn('4.2', 'FM008', 'P95 Percentile', 'decimal:2', monteCarlo.summary?.p95 || null),
      createStampedColumn('4.2', 'FM009', 'Mean', 'decimal:2', monteCarlo.summary?.mean || null),
      createStampedColumn('4.2', 'FM010', 'Std Dev', 'decimal:2', monteCarlo.summary?.stdDev || null),
    ],
  };
}

/**
 * Maps Insurance Split → Financial Model (Neon STAMPED)
 */
export function mapInsuranceSplitToFinancialModel(
  clientId: string,
  insuranceSplit: any
): NeonFinancialModel {
  const timestamp = Date.now();

  return {
    model_id: `${clientId}-FM-IS`,
    client_id: clientId,
    model_type: 'insurance_split',
    high_utilizers_count: insuranceSplit.highUtilizers.count,
    high_utilizers_cost: insuranceSplit.highUtilizers.costTotal,
    high_utilizers_avg: insuranceSplit.highUtilizers.avgPerEmployee,
    standard_utilizers_count: insuranceSplit.standardUtilizers.count,
    standard_utilizers_cost: insuranceSplit.standardUtilizers.costTotal,
    standard_utilizers_avg: insuranceSplit.standardUtilizers.avgPerEmployee,
    cost_multiplier: insuranceSplit.costMultiplier,
    created_at: timestamp,
    stamped_metadata: [
      createStampedColumn('4.3', 'FM011', 'Model Type', 'enum:model_type', 'insurance_split'),
      createStampedColumn('4.3', 'FM012', 'High Util Count', 'integer', insuranceSplit.highUtilizers.count),
      createStampedColumn('4.3', 'FM013', 'High Util Cost', 'decimal:2', insuranceSplit.highUtilizers.costTotal),
      createStampedColumn('4.3', 'FM014', 'High Util Avg', 'decimal:2', insuranceSplit.highUtilizers.avgPerEmployee),
      createStampedColumn('4.3', 'FM015', 'Standard Util Count', 'integer', insuranceSplit.standardUtilizers.count),
      createStampedColumn('4.3', 'FM016', 'Standard Util Cost', 'decimal:2', insuranceSplit.standardUtilizers.costTotal),
      createStampedColumn('4.3', 'FM017', 'Standard Util Avg', 'decimal:2', insuranceSplit.standardUtilizers.avgPerEmployee),
      createStampedColumn('4.3', 'FM018', 'Cost Multiplier', 'decimal:2', insuranceSplit.costMultiplier || null),
    ],
  };
}

/**
 * Maps Savings Scenario → Savings Scenario (Neon STAMPED)
 */
export function mapSavingsToScenario(
  clientId: string,
  savings: any
): NeonSavingsScenario {
  const timestamp = Date.now();

  return {
    scenario_id: `${clientId}-SS`,
    client_id: clientId,
    actual_cost: savings.actual,
    with_savings_cost: savings.withSavings,
    without_savings_cost: savings.withoutSavings,
    savings_amount: savings.savingsAmount || (savings.actual - savings.withSavings),
    savings_percentage: savings.savingsPercentage || 40.0,
    cost_increase: savings.costIncrease || (savings.withoutSavings - savings.actual),
    increase_percentage: savings.increasePercentage || 60.0,
    retro_description: savings.scenarios.retro.description,
    forward_description: savings.scenarios.forward.description,
    created_at: timestamp,
    stamped_metadata: [
      createStampedColumn('5.1', 'SS001', 'Actual Cost', 'decimal:2', savings.actual),
      createStampedColumn('5.1', 'SS002', 'With Savings Cost', 'decimal:2', savings.withSavings),
      createStampedColumn('5.1', 'SS003', 'Without Savings Cost', 'decimal:2', savings.withoutSavings),
      createStampedColumn('5.2', 'SS004', 'Savings Amount', 'decimal:2', savings.savingsAmount || (savings.actual - savings.withSavings)),
      createStampedColumn('5.2', 'SS005', 'Savings Percentage', 'decimal:2', savings.savingsPercentage || 40.0),
      createStampedColumn('5.2', 'SS006', 'Cost Increase', 'decimal:2', savings.costIncrease || (savings.withoutSavings - savings.actual)),
      createStampedColumn('5.2', 'SS007', 'Increase Percentage', 'decimal:2', savings.increasePercentage || 60.0),
    ],
  };
}

/**
 * Creates promotion log entry
 */
export function createPromotionLog(
  prospectId: string,
  clientId: string,
  status: 'success' | 'failed' | 'partial',
  recordsCounts: {
    clients: number;
    employees: number;
    compliance_flags: number;
    financial_models: number;
    savings_scenarios: number;
  },
  errorMessage?: string
): PromotionLog {
  return {
    log_id: `PROMO-${prospectId}-${Date.now()}`,
    prospect_id: prospectId,
    client_id: clientId,
    timestamp: Date.now(),
    agent_execution_signature: `IMO-CALC-PROMOTE-${process.env.FUNCTION_NAME || 'local'}`,
    schema_version: '2.0.0',
    blueprint_version_hash: process.env.BLUEPRINT_VERSION_HASH || 'dev',
    status,
    error_message: errorMessage,
    records_created: recordsCounts,
  };
}
